// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StationMonnitorAPI.DBModels;

namespace StationMonnitorAPI.Migrations
{
    [DbContext(typeof(MyDBContext))]
    partial class MyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ParamNameStation", b =>
                {
                    b.Property<Guid>("ParamNamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StationsStationGuid")
                        .HasColumnType("uuid");

                    b.HasKey("ParamNamesId", "StationsStationGuid");

                    b.HasIndex("StationsStationGuid");

                    b.ToTable("ParamNameStation");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.ParamName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameDomain")
                        .HasColumnType("text");

                    b.Property<int>("NameIndex")
                        .HasColumnType("integer");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("StationGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_ParamName");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ParamName");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.Station", b =>
                {
                    b.Property<Guid>("StationGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("StationGuid")
                        .HasName("PK_Station");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationConfig", b =>
                {
                    b.Property<Guid>("ConfGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cadw")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Calm")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Cup")
                        .HasColumnType("numeric");

                    b.Property<bool>("DO0")
                        .HasColumnType("boolean");

                    b.Property<bool>("DO1")
                        .HasColumnType("boolean");

                    b.Property<bool>("DO2")
                        .HasColumnType("boolean");

                    b.Property<bool>("DO3")
                        .HasColumnType("boolean");

                    b.Property<int>("DownTime")
                        .HasColumnType("integer");

                    b.Property<int>("EMode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EditedUserIdUserGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Ertime")
                        .HasColumnType("integer");

                    b.Property<int>("LowVtime")
                        .HasColumnType("integer");

                    b.Property<int>("Ontime")
                        .HasColumnType("integer");

                    b.Property<int>("OverVtime")
                        .HasColumnType("integer");

                    b.Property<int>("Overtime")
                        .HasColumnType("integer");

                    b.Property<Guid>("StationGuid")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UMax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UMin")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Wdw")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Wup")
                        .HasColumnType("numeric");

                    b.HasKey("ConfGuid");

                    b.HasIndex("EditedUserIdUserGuid");

                    b.HasIndex("StationGuid");

                    b.ToTable("StationConfig");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationConfigItem", b =>
                {
                    b.Property<Guid>("ConfGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("StationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("ConfGuid");

                    b.HasIndex("StationGuid");

                    b.ToTable("StationConfigItem");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("A00")
                        .HasColumnType("double precision");

                    b.Property<double?>("A01")
                        .HasColumnType("double precision");

                    b.Property<double?>("A02")
                        .HasColumnType("double precision");

                    b.Property<double?>("A03")
                        .HasColumnType("double precision");

                    b.Property<double?>("A04")
                        .HasColumnType("double precision");

                    b.Property<double?>("A05")
                        .HasColumnType("double precision");

                    b.Property<double?>("A06")
                        .HasColumnType("double precision");

                    b.Property<double?>("A07")
                        .HasColumnType("double precision");

                    b.Property<double?>("A08")
                        .HasColumnType("double precision");

                    b.Property<double?>("A09")
                        .HasColumnType("double precision");

                    b.Property<double?>("A10")
                        .HasColumnType("double precision");

                    b.Property<double?>("A11")
                        .HasColumnType("double precision");

                    b.Property<double?>("A12")
                        .HasColumnType("double precision");

                    b.Property<double?>("A13")
                        .HasColumnType("double precision");

                    b.Property<double?>("A14")
                        .HasColumnType("double precision");

                    b.Property<double?>("A15")
                        .HasColumnType("double precision");

                    b.Property<double?>("A16")
                        .HasColumnType("double precision");

                    b.Property<double?>("A17")
                        .HasColumnType("double precision");

                    b.Property<double?>("A18")
                        .HasColumnType("double precision");

                    b.Property<double?>("A19")
                        .HasColumnType("double precision");

                    b.Property<double?>("A20")
                        .HasColumnType("double precision");

                    b.Property<double?>("A21")
                        .HasColumnType("double precision");

                    b.Property<double?>("A22")
                        .HasColumnType("double precision");

                    b.Property<double?>("A23")
                        .HasColumnType("double precision");

                    b.Property<double?>("A24")
                        .HasColumnType("double precision");

                    b.Property<double?>("A25")
                        .HasColumnType("double precision");

                    b.Property<double?>("A26")
                        .HasColumnType("double precision");

                    b.Property<double?>("A27")
                        .HasColumnType("double precision");

                    b.Property<double?>("A28")
                        .HasColumnType("double precision");

                    b.Property<double?>("A29")
                        .HasColumnType("double precision");

                    b.Property<double?>("A30")
                        .HasColumnType("double precision");

                    b.Property<double?>("A31")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("StationGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StationGuid");

                    b.ToTable("StationData");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationDataParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Param")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StationDataParams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db2c1720-7a10-4e38-afe6-50473d8bc51d"),
                            Description = "Air temperature",
                            Name = "AirTemperature",
                            Param = "A00"
                        },
                        new
                        {
                            Id = new Guid("2e7226c8-4701-45a2-8aba-c9f471f852a1"),
                            Description = "Air humadity",
                            Name = "AirHumadity",
                            Param = "A01"
                        },
                        new
                        {
                            Id = new Guid("ff7e861d-19ca-427e-b95e-26decf89456b"),
                            Description = "Air dist PM1.0",
                            Name = "AirPM1_0",
                            Param = "A02"
                        },
                        new
                        {
                            Id = new Guid("f9fb4589-8d0f-47ae-a276-9ce2b876b6ba"),
                            Description = "Air dist PM2.5",
                            Name = "AirPM2_5",
                            Param = "A03"
                        },
                        new
                        {
                            Id = new Guid("98d1809d-e887-448d-b5e4-044dad9198b1"),
                            Description = "Air dist PM10",
                            Name = "AirPM10_",
                            Param = "A04"
                        },
                        new
                        {
                            Id = new Guid("48aa0550-83db-4865-b08c-28c17b5d060f"),
                            Description = "AirPMAdd1",
                            Name = "AirPMAdd1",
                            Param = "A05"
                        },
                        new
                        {
                            Id = new Guid("fc2b4ba5-06b0-4ec6-9fca-2c352a8aabdc"),
                            Description = "AirPMAdd2",
                            Name = "AirPMAdd2",
                            Param = "A06"
                        },
                        new
                        {
                            Id = new Guid("e44b7484-47dc-49ba-88f8-a2ec2af320cf"),
                            Description = "AirPMAdd3",
                            Name = "AirPMAdd3",
                            Param = "A07"
                        },
                        new
                        {
                            Id = new Guid("eb3366e9-19f5-43d5-81f7-5e0d8faeca36"),
                            Description = "AirPMAdd4",
                            Name = "AirPMAdd4",
                            Param = "A08"
                        },
                        new
                        {
                            Id = new Guid("ca7d4b6a-c98b-4da6-9d25-ba02e960c682"),
                            Description = "AirPMAdd5",
                            Name = "AirPMAdd5",
                            Param = "A09"
                        },
                        new
                        {
                            Id = new Guid("f0f31eb6-8b8e-43f1-9ff3-810ae4f71a68"),
                            Description = "AirPMAdd6",
                            Name = "AirPMAdd6",
                            Param = "A10"
                        },
                        new
                        {
                            Id = new Guid("3e7e9cea-83df-4112-9520-9cd1e961d5e0"),
                            Description = "AirPMAdd7",
                            Name = "AirPMAdd7",
                            Param = "A11"
                        },
                        new
                        {
                            Id = new Guid("a937fef1-ca23-4d98-90cb-da28396045af"),
                            Description = "AirPMAdd8",
                            Name = "AirPMAdd8",
                            Param = "A12"
                        },
                        new
                        {
                            Id = new Guid("8fcd9dd0-bbef-4fb5-83a1-2afbd819030d"),
                            Description = "AirPMAdd9",
                            Name = "AirPMAdd9",
                            Param = "A13"
                        },
                        new
                        {
                            Id = new Guid("db47e2db-05f8-4173-8b84-6661992e8d3d"),
                            Description = "Gas CO2",
                            Name = "gasCO2ppm",
                            Param = "A14"
                        },
                        new
                        {
                            Id = new Guid("fad3d17a-b62f-4150-81ec-b46c532aa13c"),
                            Description = "Gas CO",
                            Name = "gasCOppm",
                            Param = "A15"
                        },
                        new
                        {
                            Id = new Guid("8352302e-b9bc-4e77-b903-fa6ecdd2b7d7"),
                            Description = "Soil conductivity",
                            Name = "soilConductivity",
                            Param = "A16"
                        },
                        new
                        {
                            Id = new Guid("f931a8f8-c5a9-4450-93f1-ee342b4820d9"),
                            Description = "Soil temperature",
                            Name = "soilTemperature",
                            Param = "A17"
                        },
                        new
                        {
                            Id = new Guid("1c016d5d-3866-4b78-a898-ffafa2988298"),
                            Description = "Soil humadity",
                            Name = "soilHumadity",
                            Param = "A18"
                        },
                        new
                        {
                            Id = new Guid("f382603e-0a3d-4632-907f-f6213d3ef5a4"),
                            Description = "Soil salting",
                            Name = "soilSaliness",
                            Param = "A19"
                        },
                        new
                        {
                            Id = new Guid("7f33f4db-c365-417e-8f78-9c3692963d83"),
                            Description = "Wind speed m/s",
                            Name = "windSpeed",
                            Param = "A20"
                        },
                        new
                        {
                            Id = new Guid("71b5f93d-b8a4-4a6f-ae03-88e23b523722"),
                            Description = "Wind direction",
                            Name = "windDeirection",
                            Param = "A21"
                        },
                        new
                        {
                            Id = new Guid("bef8d17d-d2d8-49ce-884e-57fa6565bcdb"),
                            Description = "Leaf temperature",
                            Name = "leafTmeperature",
                            Param = "A22"
                        },
                        new
                        {
                            Id = new Guid("26359fd4-046a-4198-b5b2-4d7f2e3b90bb"),
                            Description = "Leaf humadity",
                            Name = "leafumadity",
                            Param = "A23"
                        },
                        new
                        {
                            Id = new Guid("cc710e02-cb5c-46bc-912e-1a613db92e3d"),
                            Description = "Langitude",
                            Name = "gpsLang",
                            Param = "A24"
                        },
                        new
                        {
                            Id = new Guid("1d3fe4e0-cccf-4016-9cab-14a956b53084"),
                            Description = "Latitude",
                            Name = "gpsLat",
                            Param = "A25"
                        },
                        new
                        {
                            Id = new Guid("9d90c9ba-3bf6-4470-ae97-dafa6c5458b6"),
                            Description = "Altitude",
                            Name = "gpsAlt",
                            Param = "A26"
                        },
                        new
                        {
                            Id = new Guid("a9f0a1dd-847b-4607-82d0-2214c5b94aae"),
                            Description = "Accumulator voltage",
                            Name = "accVoltage",
                            Param = "A27"
                        },
                        new
                        {
                            Id = new Guid("a7463f77-70d2-4f8d-9b43-a1aed53bdf39"),
                            Description = "Air pressure",
                            Name = "pressure",
                            Param = "A28"
                        },
                        new
                        {
                            Id = new Guid("72496a24-a7ea-4980-9226-73ff18933bd1"),
                            Description = "Solar radiation",
                            Name = "radiation",
                            Param = "A29"
                        },
                        new
                        {
                            Id = new Guid("b9efeaa7-5137-4782-ab4c-dbd22ccbb7e8"),
                            Description = "Reserve03",
                            Name = "reserve03",
                            Param = "A30"
                        },
                        new
                        {
                            Id = new Guid("5369d165-e2a6-413a-a4c6-edcaf7236456"),
                            Description = "Reserve04",
                            Name = "reserve04",
                            Param = "A31"
                        },
                        new
                        {
                            Id = new Guid("d94ae2d5-be08-4324-8646-7610dd853cdc"),
                            Description = "Stations information date",
                            Name = "StationDate",
                            Param = "StationDate"
                        },
                        new
                        {
                            Id = new Guid("65b7d8d7-9f6a-40b8-bfa4-4b25773d1d84"),
                            Description = "Stations information created date",
                            Name = "CreatedDate",
                            Param = "CreatedDate"
                        });
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationUser", b =>
                {
                    b.Property<Guid>("StationsStationGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("StationGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("StationsStationGuid", "UsersUserGuid");

                    b.HasIndex("StationGuid");

                    b.HasIndex("UserGuid");

                    b.HasIndex("UsersUserGuid");

                    b.ToTable("StationUsers");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.User", b =>
                {
                    b.Property<Guid>("UserGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenExpire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserGuid")
                        .HasName("PK_Users");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserGuid = new Guid("47312805-1cb2-4bca-95e3-fee35d7c34a3"),
                            CreatedDate = new DateTime(2023, 9, 20, 19, 49, 56, 538, DateTimeKind.Local).AddTicks(9193),
                            EditedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Api",
                            IsActive = true,
                            LastName = "Admin",
                            Password = "@p!Adm!n21U$er00222",
                            Role = "ApiAdmin",
                            TokenExpire = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "apiadmin"
                        },
                        new
                        {
                            UserGuid = new Guid("be501b00-2e11-4a06-b239-e56c18c5260c"),
                            CreatedDate = new DateTime(2023, 9, 20, 19, 49, 56, 539, DateTimeKind.Local).AddTicks(5943),
                            EditedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            Password = "@@dm!nU$er",
                            Role = "Admin",
                            TokenExpire = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin"
                        },
                        new
                        {
                            UserGuid = new Guid("81931a1f-0bd1-4402-a66a-9d2796de4cca"),
                            CreatedDate = new DateTime(2023, 9, 20, 19, 49, 56, 539, DateTimeKind.Local).AddTicks(5956),
                            EditedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Station",
                            IsActive = true,
                            LastName = "User",
                            Password = "_MyP0werfulDev!ce",
                            Role = "station",
                            TokenExpire = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "station"
                        });
                });

            modelBuilder.Entity("ParamNameStation", b =>
                {
                    b.HasOne("StationMonnitorAPI.DBModels.ParamName", null)
                        .WithMany()
                        .HasForeignKey("ParamNamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StationMonnitorAPI.DBModels.Station", null)
                        .WithMany()
                        .HasForeignKey("StationsStationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationConfig", b =>
                {
                    b.HasOne("StationMonnitorAPI.DBModels.User", "EditedUserId")
                        .WithMany()
                        .HasForeignKey("EditedUserIdUserGuid");

                    b.HasOne("StationMonnitorAPI.DBModels.Station", "Station")
                        .WithMany("StationsConfig")
                        .HasForeignKey("StationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditedUserId");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationConfigItem", b =>
                {
                    b.HasOne("StationMonnitorAPI.DBModels.Station", "Station")
                        .WithMany("StationsConfigItem")
                        .HasForeignKey("StationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationData", b =>
                {
                    b.HasOne("StationMonnitorAPI.DBModels.Station", "Station")
                        .WithMany("StationsData")
                        .HasForeignKey("StationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.StationUser", b =>
                {
                    b.HasOne("StationMonnitorAPI.DBModels.Station", null)
                        .WithMany("StationUsers")
                        .HasForeignKey("StationGuid");

                    b.HasOne("StationMonnitorAPI.DBModels.Station", null)
                        .WithMany()
                        .HasForeignKey("StationsStationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StationMonnitorAPI.DBModels.User", null)
                        .WithMany("StationUsers")
                        .HasForeignKey("UserGuid");

                    b.HasOne("StationMonnitorAPI.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.Station", b =>
                {
                    b.Navigation("StationsConfig");

                    b.Navigation("StationsConfigItem");

                    b.Navigation("StationsData");

                    b.Navigation("StationUsers");
                });

            modelBuilder.Entity("StationMonnitorAPI.DBModels.User", b =>
                {
                    b.Navigation("StationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
